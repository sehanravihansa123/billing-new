{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/SehanHettiarachchi/OneDrive%20-%20Offshore%20Information%20Technology%20Solutions/Desktop/test/src/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from \"next-auth\"\r\nimport AzureADProvider from \"next-auth/providers/azure-ad\"\r\nimport CredentialsProvider from \"next-auth/providers/credentials\"\r\n\r\nexport const authOptions = {\r\n  providers: [\r\n    // Microsoft OAuth\r\n    AzureADProvider({\r\n      clientId: process.env.MICROSOFT_CLIENT_ID,\r\n      clientSecret: process.env.MICROSOFT_CLIENT_SECRET,\r\n      tenantId: process.env.MICROSOFT_TENANT_ID, // from .env\r\n      authorization: {\r\n        params: {\r\n          scope: \"openid email profile offline_access User.Read\",\r\n        },\r\n      },\r\n    }),\r\n\r\n    // Hardcoded credentials\r\n    CredentialsProvider({\r\n      id: \"credentials\",\r\n      name: \"Email and Password\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" }\r\n      },\r\n      async authorize(credentials) {\r\n        console.log(\"Received credentials in authorize:\", credentials)\r\n\r\n        if (!credentials?.email || !credentials?.password) {\r\n          throw new Error(\"Missing email or password\")\r\n        }\r\n\r\n        const users = [\r\n          { id: \"1\", email: \"admin@example.com\", password: \"password123\", name: \"Admin User\" },\r\n          { id: \"2\", email: \"user@example.com\", password: \"userpass\", name: \"Regular User\" },\r\n        ]\r\n\r\n        const user = users.find(\r\n          u => u.email === credentials.email && u.password === credentials.password\r\n        )\r\n\r\n        if (user) {\r\n          console.log(\"User authenticated:\", user)\r\n          return { id: user.id, email: user.email, name: user.name }\r\n        }\r\n\r\n        throw new Error(\"Invalid email or password\")\r\n      }\r\n    })\r\n  ],\r\n  secret: process.env.NEXTAUTH_SECRET, // required for JWT\r\n  pages: {\r\n    signIn: \"/login\",\r\n    error: \"/login\", // Will redirect with ?error=...\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user, account }) {\r\n      if (user) {\r\n        token.id = user.id\r\n        token.provider = account?.provider || \"credentials\"\r\n      }\r\n      return token\r\n    },\r\n    async session({ session, token }) {\r\n      session.user.id = token.id\r\n      session.user.provider = token.provider\r\n      return session\r\n    },\r\n  },\r\n}\r\n\r\nconst handler = NextAuth(authOptions)\r\nexport { handler as GET, handler as POST }\r\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;;;;AAEO,MAAM,cAAc;IACzB,WAAW;QACT,kBAAkB;QAClB,IAAA,qKAAe,EAAC;YACd,UAAU,QAAQ,GAAG,CAAC,mBAAmB;YACzC,cAAc,QAAQ,GAAG,CAAC,uBAAuB;YACjD,UAAU,QAAQ,GAAG,CAAC,mBAAmB;YACzC,eAAe;gBACb,QAAQ;oBACN,OAAO;gBACT;YACF;QACF;QAEA,wBAAwB;QACxB,IAAA,qKAAmB,EAAC;YAClB,IAAI;YACJ,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,QAAQ,GAAG,CAAC,sCAAsC;gBAElD,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,QAAQ;oBACZ;wBAAE,IAAI;wBAAK,OAAO;wBAAqB,UAAU;wBAAe,MAAM;oBAAa;oBACnF;wBAAE,IAAI;wBAAK,OAAO;wBAAoB,UAAU;wBAAY,MAAM;oBAAe;iBAClF;gBAED,MAAM,OAAO,MAAM,IAAI,CACrB,CAAA,IAAK,EAAE,KAAK,KAAK,YAAY,KAAK,IAAI,EAAE,QAAQ,KAAK,YAAY,QAAQ;gBAG3E,IAAI,MAAM;oBACR,QAAQ,GAAG,CAAC,uBAAuB;oBACnC,OAAO;wBAAE,IAAI,KAAK,EAAE;wBAAE,OAAO,KAAK,KAAK;wBAAE,MAAM,KAAK,IAAI;oBAAC;gBAC3D;gBAEA,MAAM,IAAI,MAAM;YAClB;QACF;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,QAAQ,GAAG,SAAS,YAAY;YACxC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC1B,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;YACtC,OAAO;QACT;IACF;AACF;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC","debugId":null}}]
}